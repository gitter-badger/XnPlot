#!/bin/bash
# defaults
FileGRD="cc"
FileICC="unset"
FileSOL="unset"
FileOUT="unset"
grl=`printf "%2.2d" 1`
np=1
ifl="unset"
unsteady=0
ngc=""
cell=""
levelset=""
eq=""
vordet=""
outdir="unset"
ascii=""
tec=""
vtk=""
os=""
prc=""
job=1
vtkmerge=0
vtkbgroups="unset"

function print_usage {
  echo
  echo "`basename $0`"
  echo "User-interface of XnPlot code"
  echo "Usage: `basename $0` [opts [args]]"
  echo "Valid options are all the options of XnPlot code (see XnPlot for the complete list) plus the following:"
  echo "  [ -l grid_level -n processors_number -f flip_value -u (for unsteady sim) -od output_dir -j #concurrent_jobs -vtkmerge (for merging files into one) -vtkbgroups blocks_groups_file (can be used only with -vtkmerge)]"
  echo
  echo "Defaults of optional arguments:"
  echo "  -l 1"
  echo "  -n 1"
  echo "  -f 'last' => last flip-flop|0|1"
  echo "  steady sim"
  echo "  -od ."
  echo "  -j 1"
  echo "  -vtkmerge not passed => do not merge files"
  echo "  -vtkbgroups blocks_groups_file not passed => blocks not grouped"
  echo
  echo "Examples:"
  echo "  XnPlot-ui -g cc -i cc        -o mesh -n 8 (process only mesh)"
  echo "  XnPlot-ui -g cc -i cc -s sol -o sol  -n 8 (solution is saved)"
  echo "  XnPlot-ui -g cc -i cc -s sol -o sol  -n 8 -vtk yes -vktmerge (merge output vtk files into sol.vtm)"
  echo
  echo "Note: this user-interface constructs itself the name for cuttered files thus with -g, -i and -s only the base_name of files must be provided."
  echo
}

ini_parser ()
{
    ini="$(<$1)"                # read the file
    ini="${ini//[/\[}"          # escape [
    ini="${ini//]/\]}"          # escape ]
    IFS=$'\n' && ini=( ${ini} ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments with ;
    ini=( ${ini[*]/\    =/=} )  # remove tabs before =
    ini=( ${ini[*]/=\   /=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
    ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
}

if [ $# -eq 0 ] ; then
  print_usage
  exit
fi

#parsing command line
while [ $# -gt 0 ]; do
  case "$1" in
    "-g")
      shift; FileGRD=$1
      ;;
    "-i")
      shift; FileICC=$1
      ;;
    "-s")
      shift; FileSOL=$1
      ;;
    "-o")
      shift; FileOUT=$1
      ;;
    "-l")
      shift; grl=`printf "%2.2d" $1`
      ;;
    "-n")
      shift; np=$1
      ;;
    "-f")
      shift
      if [ "$1" != "last" ] ; then
       ifl=`printf "%2.2d" $1`
      fi
      ;;
    "-u")
      unsteady=1
      ;;
    "-ngc")
      ngc=$1
      ;;
    "-cell")
      ngc=$1
      ;;
    "-ls")
      levelset=$1
      ;;
    "-eq")
      shift; eq="-eq "$1
      ;;
    "-vordet")
      vordet=$1
      ;;
    "-od")
      shift; outdir=$1
      ;;
    "-ascii")
      ascii=$1
      ;;
    "-tec")
      shift; tec="-tec "$1
      ;;
    "-vtk")
      shift; vtk="-vtk "$1
      ;;
    "-vtkmerge")
      vtkmerge=1
      ;;
    "-vtkbgroups")
      shift; vtkbgroups=$1
      ;;
    "-os")
      shift; os="-os "$1
      ;;
    "-proc")
      prc="-proc"
      ;;
    "-j")
      shift; job=$1
      ;;
    *)
      echo; echo "Unknown switch $1"; print_usage; exit 1
      ;;
  esac
  shift
done
npm1=$(($np-1))
if [ "$ifl" == "unset" ] ; then
  if [ "$FileSOL" != "unset" ] ; then
    ifl=`ls -lt $FileSOL'_'??.$grl.p000 | head -n 1 | sed -e "s@$FileSOL@@" | awk -F _ '{print $2}' | awk -F . '{print $1}'`
    echo "Last flip-flop file $ifl"
  else
    if [ $unsteady -eq 1 ] ; then
      ifl=`ls -lt $FileGRD'_'??.$grl.grd.p000 | head -n 1 | sed -e "s@$FileSOL@@" | awk -F _ '{print $2}' | awk -F . '{print $1}'`
      echo "Last flip-flop file $ifl"
    else
      ifl='00'
    fi
  fi
fi
if [ "$outdir" == "unset" ] ; then
  outdir="./"
else
  if [ "${outdir: -1}" != "/" ] ; then
    $outdir = $outdir"/"
  fi
fi

# post-processing files
for p in $( seq 0 1 $npm1 ); do
  proc=`printf "%3.3d" $p`
  if [ "$prc" != "" ] ; then
    prc="-proc "$p
  fi
  if [ $unsteady -eq 1 ] ; then
    GRD="-g $FileGRD"_"$ifl.$grl.grd.p$proc"
    if [ "$FileICC" != "unset" ] ; then
      ICC="-i $FileICC"_"$ifl.$grl.p$proc"
		else
      ICC=""
    fi
  else
    GRD="-g $FileGRD.$grl.grd.p$proc"
    if [ "$FileICC" != "unset" ] ; then
      ICC="-i $FileICC.$grl.p$proc"
		else
      ICC=""
    fi
  fi
  if [ "$FileSOL" != "unset" ] ; then
    SOL="-s $FileSOL"_"$ifl.$grl.p$proc"
	else
		SOL=""
  fi
  if [ "$FileOUT" != "unset" ] ; then
    OUT="-o $outdir$FileOUT.$grl.p$proc"
	else
		OUT=""
  fi
  echo "XnPlot $GRD $ngc $cell $ICC $SOL $OUT $levelset $eq $vordet $ascii $tec $vtk $os $prc"
  nohup XnPlot $GRD $ngc $cell $ICC $SOL $OUT $levelset $eq $vordet $ascii $tec $vtk $os $prc > /dev/null 2>&1 &
  let count+=1
  [[ $((count%$job)) -eq 0 ]] && wait
done
if [ $vtkmerge -eq 1 ] ; then
  if [ "$FileOUT" != "unset" ] ; then
    echo "Generating the VTM merged meta file"
    echo "<?xml version=\"1.0\"?>" > $outdir$FileOUT.vtm
    echo "<VTKFile type=\"vtkMultiBlockDataSet\" version=\"1.0\" byte_order=\"LittleEndian\">" >> $outdir$FileOUT.vtm
    echo "  <vtkMultiBlockDataSet>" >> $outdir$FileOUT.vtm
    if [ "$vtkbgroups" != "unset" ] ; then
      ini_parser $vtkbgroups
      gg=0
      for g in $( seq 0 2 $((${#ini[@]} - 1)) ); do
        group=`echo ${ini[$g]} | sed -e 's/\[//g' | sed -e 's/\]//g' | sed -e 's/(//g' | sed -e 's/)//g' | sed -e 's/ //g'`
        blocks=`echo ${ini[$((g + 1))]} | sed -e 's/blocks=//g' | sed -e 's/(//g' | sed -e 's/)//g'`
        IFS=' ' read -a blocks <<< "$blocks"
        echo "    <Block index=\"$gg\" name=\"$group\">" >> $outdir$FileOUT.vtm
        b=0
        for block in "${blocks[@]}" ; do
          bb=`printf "%4.4d" $block`
          blk="blk_"$bb
          bfound=""
          for file in $( ls $outdir$FileOUT*.vtm ); do
            if [ "$file" != "$outdir$FileOUT.vtm" ] ; then
              bfound=`grep $blk $file | awk -v bi=$b '{$1=$2=""; print "      <DataSet index=\"" bi+NR-1 "\""$0}'`
              if [ "$bfound" != "" ] ; then
                break
              fi
            fi
          done
          echo $bfound >> $outdir$FileOUT.vtm
          b=$((b + 1))
        done
        echo "    </Block>" >> $outdir$FileOUT.vtm
        gg=$((gg + 1))
      done
    else
      echo "    <Block index=\"0\">" >> $outdir$FileOUT.vtm
      b=0
      for file in $( ls $outdir$FileOUT*.vtm ); do
        if [ "$file" != "$outdir$FileOUT.vtm" ] ; then
          grep "<DataSet" $file | awk -v bi=$b '{$1=$2=""; print "      <DataSet index=\"" bi+NR-1 "\""$0}' >> $outdir$FileOUT.vtm
          l=`grep "<DataSet" $file | wc -l`
          b=$((b + l))
        fi
      done
      echo "    </Block>" >> $outdir$FileOUT.vtm
    fi
    echo "  </vtkMultiBlockDataSet>" >> $outdir$FileOUT.vtm
    echo "</VTKFile>" >> $outdir$FileOUT.vtm
  else
    echo "Error: -vtkmerge can be used only with -o switch!"
  fi
fi
exit 0
